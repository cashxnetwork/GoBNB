/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type UpgradeStructStruct = {
  id: BigNumberish;
  valueToUpgradeInUSD: BigNumberish;
};

export type UpgradeStructStructOutput = [
  id: bigint,
  valueToUpgradeInUSD: bigint
] & { id: bigint; valueToUpgradeInUSD: bigint };

export type RefereeStructStruct = {
  referee: AddressLike;
  assignedTo: AddressLike;
};

export type RefereeStructStructOutput = [
  referee: string,
  assignedTo: string
] & { referee: string; assignedTo: string };

export type TeamStructStruct = { teamMember: AddressLike; level: BigNumberish };

export type TeamStructStructOutput = [teamMember: string, level: bigint] & {
  teamMember: string;
  level: bigint;
};

export type AccountStructStruct = {
  self: AddressLike;
  parent: AddressLike;
  referrer: AddressLike;
  referee: AddressLike[];
  refereeAssigned: RefereeStructStruct[];
  team: TeamStructStruct[];
  selfBusinessInUSD: BigNumberish;
  upgradedValueInUSD: BigNumberish;
  upgradeId: BigNumberish;
  directBusinessInUSD: BigNumberish;
  teamBusinessInUSD: BigNumberish;
  referralRewardsInUSD: BigNumberish;
  weeklyRewardsInUSD: BigNumberish;
  upgradeRewardsInUSD: BigNumberish;
  userRandomIndex: BigNumberish;
  timestampJoined: BigNumberish;
};

export type AccountStructStructOutput = [
  self: string,
  parent: string,
  referrer: string,
  referee: string[],
  refereeAssigned: RefereeStructStructOutput[],
  team: TeamStructStructOutput[],
  selfBusinessInUSD: bigint,
  upgradedValueInUSD: bigint,
  upgradeId: bigint,
  directBusinessInUSD: bigint,
  teamBusinessInUSD: bigint,
  referralRewardsInUSD: bigint,
  weeklyRewardsInUSD: bigint,
  upgradeRewardsInUSD: bigint,
  userRandomIndex: bigint,
  timestampJoined: bigint
] & {
  self: string;
  parent: string;
  referrer: string;
  referee: string[];
  refereeAssigned: RefereeStructStructOutput[];
  team: TeamStructStructOutput[];
  selfBusinessInUSD: bigint;
  upgradedValueInUSD: bigint;
  upgradeId: bigint;
  directBusinessInUSD: bigint;
  teamBusinessInUSD: bigint;
  referralRewardsInUSD: bigint;
  weeklyRewardsInUSD: bigint;
  upgradeRewardsInUSD: bigint;
  userRandomIndex: bigint;
  timestampJoined: bigint;
};

export interface RegistrationUpgradeableInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "checkIfChainLinkOracleAddressSupporeted"
      | "distributeWeeklyReward"
      | "getAllUsers"
      | "getContractDefaults"
      | "getNativePriceInUSD"
      | "getRandomUserList"
      | "getRegistrationsStats"
      | "getSupportedChainLinkOracleAddress"
      | "getUpgradePlans"
      | "getUpgradePlansById"
      | "getUserAccount"
      | "getUserBusiness"
      | "getUserCurrentUpgradeLevel"
      | "getUserRewards"
      | "getUserTeam"
      | "getWeeklyRewardToBeDistributed"
      | "initialize"
      | "needNativeToRegister"
      | "owner"
      | "proxiableUUID"
      | "registrationNative"
      | "renounceOwnership"
      | "setChainLinkOracleAddress"
      | "setDefaultReferrer"
      | "transferOwnership"
      | "updateUpgradePlans"
      | "upgradeAccountNative"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddedToRandomList"
      | "DefaultReferrerUpdated"
      | "Initialized"
      | "OwnershipTransferred"
      | "ParentAdded"
      | "ReferralRewardsPaid"
      | "ReferrerAdded"
      | "ReferrerNoAdded"
      | "Registration"
      | "RegistrationAssigned"
      | "RemovedFromRandomList"
      | "TeamAddressAdded"
      | "TeamWalletRewardPaid"
      | "UpgradeRewardNotPaid"
      | "UpgradeRewardPaid"
      | "Upgraded"
      | "WeeklyRewardNotPaid"
      | "WeeklyRewardPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfChainLinkOracleAddressSupporeted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeWeeklyReward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUsers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractDefaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNativePriceInUSD",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRandomUserList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegistrationsStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedChainLinkOracleAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradePlans",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUpgradePlansById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserBusiness",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCurrentUpgradeLevel",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTeam",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWeeklyRewardToBeDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "needNativeToRegister",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationNative",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setChainLinkOracleAddress",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUpgradePlans",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAccountNative",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfChainLinkOracleAddressSupporeted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeWeeklyReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractDefaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNativePriceInUSD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRandomUserList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegistrationsStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedChainLinkOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUpgradePlansById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserBusiness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCurrentUpgradeLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWeeklyRewardToBeDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "needNativeToRegister",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setChainLinkOracleAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateUpgradePlans",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAccountNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AddedToRandomListEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultReferrerUpdatedEvent {
  export type InputTuple = [defaultReferrer: AddressLike];
  export type OutputTuple = [defaultReferrer: string];
  export interface OutputObject {
    defaultReferrer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ParentAddedEvent {
  export type InputTuple = [
    by: AddressLike,
    to: AddressLike,
    user: AddressLike
  ];
  export type OutputTuple = [by: string, to: string, user: string];
  export interface OutputObject {
    by: string;
    to: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralRewardsPaidEvent {
  export type InputTuple = [
    to: AddressLike,
    user: AddressLike,
    valueInWei: BigNumberish,
    level: BigNumberish
  ];
  export type OutputTuple = [
    to: string,
    user: string,
    valueInWei: bigint,
    level: bigint
  ];
  export interface OutputObject {
    to: string;
    user: string;
    valueInWei: bigint;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferrerAddedEvent {
  export type InputTuple = [by: AddressLike, user: AddressLike];
  export type OutputTuple = [by: string, user: string];
  export interface OutputObject {
    by: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferrerNoAddedEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationEvent {
  export type InputTuple = [
    by: AddressLike,
    to: AddressLike,
    user: AddressLike,
    valueInWei: BigNumberish
  ];
  export type OutputTuple = [
    by: string,
    to: string,
    user: string,
    valueInWei: bigint
  ];
  export interface OutputObject {
    by: string;
    to: string;
    user: string;
    valueInWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistrationAssignedEvent {
  export type InputTuple = [
    by: AddressLike,
    to: AddressLike,
    user: AddressLike
  ];
  export type OutputTuple = [by: string, to: string, user: string];
  export interface OutputObject {
    by: string;
    to: string;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemovedFromRandomListEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamAddressAddedEvent {
  export type InputTuple = [
    to: AddressLike,
    user: AddressLike,
    level: BigNumberish
  ];
  export type OutputTuple = [to: string, user: string, level: bigint];
  export interface OutputObject {
    to: string;
    user: string;
    level: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamWalletRewardPaidEvent {
  export type InputTuple = [to: AddressLike, valueInWei: BigNumberish];
  export type OutputTuple = [to: string, valueInWei: bigint];
  export interface OutputObject {
    to: string;
    valueInWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradeRewardNotPaidEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradeRewardPaidEvent {
  export type InputTuple = [
    to: AddressLike,
    by: AddressLike,
    valueInWei: BigNumberish
  ];
  export type OutputTuple = [to: string, by: string, valueInWei: bigint];
  export interface OutputObject {
    to: string;
    by: string;
    valueInWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyRewardNotPaidEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeeklyRewardPaidEvent {
  export type InputTuple = [to: AddressLike, valueInWei: BigNumberish];
  export type OutputTuple = [to: string, valueInWei: bigint];
  export interface OutputObject {
    to: string;
    valueInWei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RegistrationUpgradeable extends BaseContract {
  connect(runner?: ContractRunner | null): RegistrationUpgradeable;
  waitForDeployment(): Promise<this>;

  interface: RegistrationUpgradeableInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  checkIfChainLinkOracleAddressSupporeted: TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [boolean],
    "view"
  >;

  distributeWeeklyReward: TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllUsers: TypedContractMethod<[], [string[]], "view">;

  getContractDefaults: TypedContractMethod<
    [],
    [
      [string, bigint, string, bigint, string, bigint] & {
        teamWallet: string;
        teamWalletRate: bigint;
        liquidityWallet: string;
        liquidityCreationrate: bigint;
        defaultReferrer: string;
        registrationValueInUSD: bigint;
      }
    ],
    "view"
  >;

  getNativePriceInUSD: TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [bigint],
    "view"
  >;

  getRandomUserList: TypedContractMethod<[], [string[]], "view">;

  getRegistrationsStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUser: bigint;
        totalRegistrationValueInUSD: bigint;
        totalReferralPaidInUSD: bigint;
        totalWeeklyRewardsPaidInUSD: bigint;
      }
    ],
    "view"
  >;

  getSupportedChainLinkOracleAddress: TypedContractMethod<
    [],
    [string[]],
    "view"
  >;

  getUpgradePlans: TypedContractMethod<
    [],
    [
      [UpgradeStructStructOutput[], bigint] & {
        upgradePlans: UpgradeStructStructOutput[];
        upgradePlansCount: bigint;
      }
    ],
    "view"
  >;

  getUpgradePlansById: TypedContractMethod<
    [_id: BigNumberish],
    [UpgradeStructStructOutput],
    "view"
  >;

  getUserAccount: TypedContractMethod<
    [_userAddress: AddressLike],
    [AccountStructStructOutput],
    "view"
  >;

  getUserBusiness: TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        selfBusinessInUSD: bigint;
        directBusinessInUSD: bigint;
        teamBusinessInUSD: bigint;
        totalBusinessInUSD: bigint;
      }
    ],
    "view"
  >;

  getUserCurrentUpgradeLevel: TypedContractMethod<
    [_userAddress: AddressLike],
    [[bigint, bigint] & { level: bigint; totalUpgradeValueInUSD: bigint }],
    "view"
  >;

  getUserRewards: TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        referralRewardInUSD: bigint;
        weeklyRewardInUSD: bigint;
        upgradeRewardsInUSD: bigint;
        totalRewards: bigint;
      }
    ],
    "view"
  >;

  getUserTeam: TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [
        string,
        string[],
        bigint,
        RefereeStructStructOutput[],
        bigint,
        TeamStructStructOutput[],
        bigint
      ] & {
        referrer: string;
        referees: string[];
        refereeCount: bigint;
        refereeAssigned: RefereeStructStructOutput[];
        refereeAssignedCount: bigint;
        team: TeamStructStructOutput[];
        teamCount: bigint;
      }
    ],
    "view"
  >;

  getWeeklyRewardToBeDistributed: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _rewardValue: bigint;
        _remianingTime: bigint;
        _endTime: bigint;
      }
    ],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  needNativeToRegister: TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  registrationNative: TypedContractMethod<
    [_referrer: AddressLike, _chainLinkOracleAddress: AddressLike],
    [void],
    "payable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setChainLinkOracleAddress: TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;

  setDefaultReferrer: TypedContractMethod<
    [defaultReferrer_: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateUpgradePlans: TypedContractMethod<
    [_valueToUpgradeInDecimals: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  upgradeAccountNative: TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [void],
    "payable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "checkIfChainLinkOracleAddressSupporeted"
  ): TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "distributeWeeklyReward"
  ): TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllUsers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContractDefaults"
  ): TypedContractMethod<
    [],
    [
      [string, bigint, string, bigint, string, bigint] & {
        teamWallet: string;
        teamWalletRate: bigint;
        liquidityWallet: string;
        liquidityCreationrate: bigint;
        defaultReferrer: string;
        registrationValueInUSD: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNativePriceInUSD"
  ): TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRandomUserList"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRegistrationsStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint] & {
        totalUser: bigint;
        totalRegistrationValueInUSD: bigint;
        totalReferralPaidInUSD: bigint;
        totalWeeklyRewardsPaidInUSD: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedChainLinkOracleAddress"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUpgradePlans"
  ): TypedContractMethod<
    [],
    [
      [UpgradeStructStructOutput[], bigint] & {
        upgradePlans: UpgradeStructStructOutput[];
        upgradePlansCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUpgradePlansById"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [UpgradeStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserAccount"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [AccountStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserBusiness"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        selfBusinessInUSD: bigint;
        directBusinessInUSD: bigint;
        teamBusinessInUSD: bigint;
        totalBusinessInUSD: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserCurrentUpgradeLevel"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [[bigint, bigint] & { level: bigint; totalUpgradeValueInUSD: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserRewards"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        referralRewardInUSD: bigint;
        weeklyRewardInUSD: bigint;
        upgradeRewardsInUSD: bigint;
        totalRewards: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserTeam"
  ): TypedContractMethod<
    [_userAddress: AddressLike],
    [
      [
        string,
        string[],
        bigint,
        RefereeStructStructOutput[],
        bigint,
        TeamStructStructOutput[],
        bigint
      ] & {
        referrer: string;
        referees: string[];
        refereeCount: bigint;
        refereeAssigned: RefereeStructStructOutput[];
        refereeAssignedCount: bigint;
        team: TeamStructStructOutput[];
        teamCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWeeklyRewardToBeDistributed"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        _rewardValue: bigint;
        _remianingTime: bigint;
        _endTime: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "needNativeToRegister"
  ): TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registrationNative"
  ): TypedContractMethod<
    [_referrer: AddressLike, _chainLinkOracleAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setChainLinkOracleAddress"
  ): TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike, _status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultReferrer"
  ): TypedContractMethod<[defaultReferrer_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateUpgradePlans"
  ): TypedContractMethod<
    [_valueToUpgradeInDecimals: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeAccountNative"
  ): TypedContractMethod<
    [_chainLinkOracleAddress: AddressLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AddedToRandomList"
  ): TypedContractEvent<
    AddedToRandomListEvent.InputTuple,
    AddedToRandomListEvent.OutputTuple,
    AddedToRandomListEvent.OutputObject
  >;
  getEvent(
    key: "DefaultReferrerUpdated"
  ): TypedContractEvent<
    DefaultReferrerUpdatedEvent.InputTuple,
    DefaultReferrerUpdatedEvent.OutputTuple,
    DefaultReferrerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ParentAdded"
  ): TypedContractEvent<
    ParentAddedEvent.InputTuple,
    ParentAddedEvent.OutputTuple,
    ParentAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReferralRewardsPaid"
  ): TypedContractEvent<
    ReferralRewardsPaidEvent.InputTuple,
    ReferralRewardsPaidEvent.OutputTuple,
    ReferralRewardsPaidEvent.OutputObject
  >;
  getEvent(
    key: "ReferrerAdded"
  ): TypedContractEvent<
    ReferrerAddedEvent.InputTuple,
    ReferrerAddedEvent.OutputTuple,
    ReferrerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ReferrerNoAdded"
  ): TypedContractEvent<
    ReferrerNoAddedEvent.InputTuple,
    ReferrerNoAddedEvent.OutputTuple,
    ReferrerNoAddedEvent.OutputObject
  >;
  getEvent(
    key: "Registration"
  ): TypedContractEvent<
    RegistrationEvent.InputTuple,
    RegistrationEvent.OutputTuple,
    RegistrationEvent.OutputObject
  >;
  getEvent(
    key: "RegistrationAssigned"
  ): TypedContractEvent<
    RegistrationAssignedEvent.InputTuple,
    RegistrationAssignedEvent.OutputTuple,
    RegistrationAssignedEvent.OutputObject
  >;
  getEvent(
    key: "RemovedFromRandomList"
  ): TypedContractEvent<
    RemovedFromRandomListEvent.InputTuple,
    RemovedFromRandomListEvent.OutputTuple,
    RemovedFromRandomListEvent.OutputObject
  >;
  getEvent(
    key: "TeamAddressAdded"
  ): TypedContractEvent<
    TeamAddressAddedEvent.InputTuple,
    TeamAddressAddedEvent.OutputTuple,
    TeamAddressAddedEvent.OutputObject
  >;
  getEvent(
    key: "TeamWalletRewardPaid"
  ): TypedContractEvent<
    TeamWalletRewardPaidEvent.InputTuple,
    TeamWalletRewardPaidEvent.OutputTuple,
    TeamWalletRewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "UpgradeRewardNotPaid"
  ): TypedContractEvent<
    UpgradeRewardNotPaidEvent.InputTuple,
    UpgradeRewardNotPaidEvent.OutputTuple,
    UpgradeRewardNotPaidEvent.OutputObject
  >;
  getEvent(
    key: "UpgradeRewardPaid"
  ): TypedContractEvent<
    UpgradeRewardPaidEvent.InputTuple,
    UpgradeRewardPaidEvent.OutputTuple,
    UpgradeRewardPaidEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyRewardNotPaid"
  ): TypedContractEvent<
    WeeklyRewardNotPaidEvent.InputTuple,
    WeeklyRewardNotPaidEvent.OutputTuple,
    WeeklyRewardNotPaidEvent.OutputObject
  >;
  getEvent(
    key: "WeeklyRewardPaid"
  ): TypedContractEvent<
    WeeklyRewardPaidEvent.InputTuple,
    WeeklyRewardPaidEvent.OutputTuple,
    WeeklyRewardPaidEvent.OutputObject
  >;

  filters: {
    "AddedToRandomList(address)": TypedContractEvent<
      AddedToRandomListEvent.InputTuple,
      AddedToRandomListEvent.OutputTuple,
      AddedToRandomListEvent.OutputObject
    >;
    AddedToRandomList: TypedContractEvent<
      AddedToRandomListEvent.InputTuple,
      AddedToRandomListEvent.OutputTuple,
      AddedToRandomListEvent.OutputObject
    >;

    "DefaultReferrerUpdated(address)": TypedContractEvent<
      DefaultReferrerUpdatedEvent.InputTuple,
      DefaultReferrerUpdatedEvent.OutputTuple,
      DefaultReferrerUpdatedEvent.OutputObject
    >;
    DefaultReferrerUpdated: TypedContractEvent<
      DefaultReferrerUpdatedEvent.InputTuple,
      DefaultReferrerUpdatedEvent.OutputTuple,
      DefaultReferrerUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ParentAdded(address,address,address)": TypedContractEvent<
      ParentAddedEvent.InputTuple,
      ParentAddedEvent.OutputTuple,
      ParentAddedEvent.OutputObject
    >;
    ParentAdded: TypedContractEvent<
      ParentAddedEvent.InputTuple,
      ParentAddedEvent.OutputTuple,
      ParentAddedEvent.OutputObject
    >;

    "ReferralRewardsPaid(address,address,uint256,uint32)": TypedContractEvent<
      ReferralRewardsPaidEvent.InputTuple,
      ReferralRewardsPaidEvent.OutputTuple,
      ReferralRewardsPaidEvent.OutputObject
    >;
    ReferralRewardsPaid: TypedContractEvent<
      ReferralRewardsPaidEvent.InputTuple,
      ReferralRewardsPaidEvent.OutputTuple,
      ReferralRewardsPaidEvent.OutputObject
    >;

    "ReferrerAdded(address,address)": TypedContractEvent<
      ReferrerAddedEvent.InputTuple,
      ReferrerAddedEvent.OutputTuple,
      ReferrerAddedEvent.OutputObject
    >;
    ReferrerAdded: TypedContractEvent<
      ReferrerAddedEvent.InputTuple,
      ReferrerAddedEvent.OutputTuple,
      ReferrerAddedEvent.OutputObject
    >;

    "ReferrerNoAdded(string)": TypedContractEvent<
      ReferrerNoAddedEvent.InputTuple,
      ReferrerNoAddedEvent.OutputTuple,
      ReferrerNoAddedEvent.OutputObject
    >;
    ReferrerNoAdded: TypedContractEvent<
      ReferrerNoAddedEvent.InputTuple,
      ReferrerNoAddedEvent.OutputTuple,
      ReferrerNoAddedEvent.OutputObject
    >;

    "Registration(address,address,address,uint256)": TypedContractEvent<
      RegistrationEvent.InputTuple,
      RegistrationEvent.OutputTuple,
      RegistrationEvent.OutputObject
    >;
    Registration: TypedContractEvent<
      RegistrationEvent.InputTuple,
      RegistrationEvent.OutputTuple,
      RegistrationEvent.OutputObject
    >;

    "RegistrationAssigned(address,address,address)": TypedContractEvent<
      RegistrationAssignedEvent.InputTuple,
      RegistrationAssignedEvent.OutputTuple,
      RegistrationAssignedEvent.OutputObject
    >;
    RegistrationAssigned: TypedContractEvent<
      RegistrationAssignedEvent.InputTuple,
      RegistrationAssignedEvent.OutputTuple,
      RegistrationAssignedEvent.OutputObject
    >;

    "RemovedFromRandomList(address)": TypedContractEvent<
      RemovedFromRandomListEvent.InputTuple,
      RemovedFromRandomListEvent.OutputTuple,
      RemovedFromRandomListEvent.OutputObject
    >;
    RemovedFromRandomList: TypedContractEvent<
      RemovedFromRandomListEvent.InputTuple,
      RemovedFromRandomListEvent.OutputTuple,
      RemovedFromRandomListEvent.OutputObject
    >;

    "TeamAddressAdded(address,address,uint32)": TypedContractEvent<
      TeamAddressAddedEvent.InputTuple,
      TeamAddressAddedEvent.OutputTuple,
      TeamAddressAddedEvent.OutputObject
    >;
    TeamAddressAdded: TypedContractEvent<
      TeamAddressAddedEvent.InputTuple,
      TeamAddressAddedEvent.OutputTuple,
      TeamAddressAddedEvent.OutputObject
    >;

    "TeamWalletRewardPaid(address,uint256)": TypedContractEvent<
      TeamWalletRewardPaidEvent.InputTuple,
      TeamWalletRewardPaidEvent.OutputTuple,
      TeamWalletRewardPaidEvent.OutputObject
    >;
    TeamWalletRewardPaid: TypedContractEvent<
      TeamWalletRewardPaidEvent.InputTuple,
      TeamWalletRewardPaidEvent.OutputTuple,
      TeamWalletRewardPaidEvent.OutputObject
    >;

    "UpgradeRewardNotPaid(string)": TypedContractEvent<
      UpgradeRewardNotPaidEvent.InputTuple,
      UpgradeRewardNotPaidEvent.OutputTuple,
      UpgradeRewardNotPaidEvent.OutputObject
    >;
    UpgradeRewardNotPaid: TypedContractEvent<
      UpgradeRewardNotPaidEvent.InputTuple,
      UpgradeRewardNotPaidEvent.OutputTuple,
      UpgradeRewardNotPaidEvent.OutputObject
    >;

    "UpgradeRewardPaid(address,address,uint256)": TypedContractEvent<
      UpgradeRewardPaidEvent.InputTuple,
      UpgradeRewardPaidEvent.OutputTuple,
      UpgradeRewardPaidEvent.OutputObject
    >;
    UpgradeRewardPaid: TypedContractEvent<
      UpgradeRewardPaidEvent.InputTuple,
      UpgradeRewardPaidEvent.OutputTuple,
      UpgradeRewardPaidEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WeeklyRewardNotPaid(string)": TypedContractEvent<
      WeeklyRewardNotPaidEvent.InputTuple,
      WeeklyRewardNotPaidEvent.OutputTuple,
      WeeklyRewardNotPaidEvent.OutputObject
    >;
    WeeklyRewardNotPaid: TypedContractEvent<
      WeeklyRewardNotPaidEvent.InputTuple,
      WeeklyRewardNotPaidEvent.OutputTuple,
      WeeklyRewardNotPaidEvent.OutputObject
    >;

    "WeeklyRewardPaid(address,uint256)": TypedContractEvent<
      WeeklyRewardPaidEvent.InputTuple,
      WeeklyRewardPaidEvent.OutputTuple,
      WeeklyRewardPaidEvent.OutputObject
    >;
    WeeklyRewardPaid: TypedContractEvent<
      WeeklyRewardPaidEvent.InputTuple,
      WeeklyRewardPaidEvent.OutputTuple,
      WeeklyRewardPaidEvent.OutputObject
    >;
  };
}
